name:  Swift Package Manager

on:

  push:
    branches: [ main , master]



jobs:
  build:
    name: Swift Package Manager
    # 环境
    runs-on: macos-latest

    steps:
    # 检出代码
    - uses: actions/checkout@v2



    # 框架下载
    - name: 框架下载
      run: |
        swift package update
        echo "✅✅✅✅✅✅✅"
        ls -l -a .build


    - name: 压缩
      run: |
        sleep 0.5
        mv .build SourcePackages
        mkdir -p archive
        sleep 0.5
        zip -r archive/sfm-full.zip SourcePackages
        sleep 0.5
        rm -rf SourcePackages/checkouts
        sleep 0.5
        zip -r archive/sfm-repositories.zip SourcePackages
        sleep 0.5
        
        

    # ##2. GitHub Push Action
    # - name: Push changes
    #   uses: ad-m/github-push-action@master
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}



  # 构建预览发布信息
    - name: Generate Prerelease Release
      id: create_release
      run: |
        echo '### Swift Package Manager' > ReleaseNotes.md
        echo "" >> ReleaseNotes.md
        echo "更新时间：$(date '+%Y-%m-%d %H:%M:%S')" >> ReleaseNotes.md
        echo "" >> ReleaseNotes.md
        echo 'SourcePackages: \' >> ReleaseNotes.md
        echo 'spm-full:全部 \' >> ReleaseNotes.md
        echo 'spm-repositories:不含checkouts部分 ' >> ReleaseNotes.md
        echo "" >> ReleaseNotes.md
        echo "说明：这两个文件都可以直接使用使用" >> ReleaseNotes.md


    # 删除旧的预览发布    
    - name: Delete Old Prerelease
      uses: dev-drprasad/delete-tag-and-release@v0.2.0
      with:
        # tag_name: ${{ env.OLD_PRE_TAG }}
        tag_name: "v0.1-spm"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    # 发布预览版
    - name: Publish GitHub Release
      if: contains(github.event.head_commit.message, 'Bump version') == false
      uses: ncipollo/release-action@v1.8.6
      with:
        prerelease: false
        bodyFile: ReleaseNotes.md
        artifacts: "./archive/*"
        tag: "v0.1-spm"
        token: ${{ secrets.GITHUB_TOKEN }}   







# #第二个job，将结果推送到另一个仓库
#   deploy: 
#     name: 推送到AutoTaskPush
#     # job执行顺序依赖
#     needs: build

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v2


#     ## 拷贝文件到同步目录中
#     - name: Copy files to sync
#       run: |
#         git pull
#         mkdir -p sync/bt
#         cp -R bt/tracker sync/bt/tracker
#         cp -R bt/index.html sync/bt/
#         mkdir -p sync/vpn
#         cp -R vpn/list sync/vpn/list
#         cp -R vpn/list-yaml sync/vpn/list-yaml
#         cp -R vpn/index.html sync/vpn/
#         cp -R README.md sync
#         cp -R index.html sync



#     # 注意该插件必须在Linux平台上运行
#     - name: Push to AutoTaskPush
#       uses: s0/git-publish-subdir-action@develop
#       env:
#         REPO: git@github.com:RANSAA/AutoTaskPush.git
#         BRANCH: master
#         FOLDER: sync
#         SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
#         SQUASH_HISTORY: true
#         SKIP_EMPTY_COMMITS: true




### 参考：
### https://blog.csdn.net/unreliable_narrator/article/details/124468384
### 